version: '3.8'

services:
  # Infraestructura Base
  mongodb:
    image: mongo:7.0
    container_name: backupguard-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin123
      MONGO_INITDB_DATABASE: backupguard
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - backupguard-network

  redis:
    image: redis:7.2-alpine
    container_name: backupguard-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --requirepass redis123
    volumes:
      - redis_data:/data
    networks:
      - backupguard-network

  # Message Queue
  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: backupguard-rabbitmq
    restart: unless-stopped
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - backupguard-network

  # API Gateway
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile.dev
    container_name: backupguard-gateway
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=development
      - PORT=8080
      - MONGODB_URL=mongodb://admin:admin123@mongodb:27017/backupguard?authSource=admin
      - REDIS_URL=redis://:redis123@redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - USER_SERVICE_URL=http://user-service:3001
      - BACKUP_SERVICE_URL=http://backup-service:3002
      - NOTIFICATION_SERVICE_URL=http://notification-service:3003
      - REPORT_SERVICE_URL=http://report-service:3004
      - CONFIG_SERVICE_URL=http://config-service:3005
    depends_on:
      - mongodb
      - redis
      - rabbitmq
    volumes:
      - ./services/api-gateway:/app
      - /app/node_modules
    networks:
      - backupguard-network

  # User Service
  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile.dev
    container_name: backupguard-user-service
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - MONGODB_URL=mongodb://admin:admin123@mongodb:27017/backupguard?authSource=admin
      - REDIS_URL=redis://:redis123@redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - JWT_EXPIRES_IN=15m
      - REFRESH_TOKEN_EXPIRES_IN=30d
      - EMAIL_SERVICE_URL=http://notification-service:3003
    depends_on:
      - mongodb
      - redis
    volumes:
      - ./services/user-service:/app
      - /app/node_modules
    networks:
      - backupguard-network

  # Backup Monitor Service
  backup-service:
    build:
      context: ./services/backup-monitor-service
      dockerfile: Dockerfile.dev
    container_name: backupguard-backup-service
    restart: unless-stopped
    ports:
      - "3002:3002"
      - "8000:8000"  # WebSocket port
    environment:
      - NODE_ENV=development
      - PORT=3002
      - WEBSOCKET_PORT=8000
      - MONGODB_URL=mongodb://admin:admin123@mongodb:27017/backupguard?authSource=admin
      - REDIS_URL=redis://:redis123@redis:6379
      - RABBITMQ_URL=amqp://admin:admin123@rabbitmq:5672
      - NOTIFICATION_SERVICE_URL=http://notification-service:3003
    depends_on:
      - mongodb
      - redis
      - rabbitmq
    volumes:
      - ./services/backup-monitor-service:/app
      - /app/node_modules
    networks:
      - backupguard-network

  # Notification Service
  notification-service:
    build:
      context: ./services/notification-service
      dockerfile: Dockerfile.dev
    container_name: backupguard-notification-service
    restart: unless-stopped
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=development
      - PORT=3003
      - MONGODB_URL=mongodb://admin:admin123@mongodb:27017/backupguard?authSource=admin
      - REDIS_URL=redis://:redis123@redis:6379
      - RABBITMQ_URL=amqp://admin:admin123@rabbitmq:5672
      - EMAIL_PROVIDER=sendgrid
      - SENDGRID_API_KEY=your-sendgrid-api-key
      - EMAIL_FROM=noreply@backupguard.pro
      - SMS_PROVIDER=twilio
      - TWILIO_ACCOUNT_SID=your-twilio-sid
      - TWILIO_AUTH_TOKEN=your-twilio-token
      - TWILIO_PHONE_FROM=+1234567890
    depends_on:
      - mongodb
      - redis
      - rabbitmq
    volumes:
      - ./services/notification-service:/app
      - /app/node_modules
    networks:
      - backupguard-network

  # Report Service
  report-service:
    build:
      context: ./services/report-service
      dockerfile: Dockerfile.dev
    container_name: backupguard-report-service
    restart: unless-stopped
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=development
      - PORT=3004
      - MONGODB_URL=mongodb://admin:admin123@mongodb:27017/backupguard?authSource=admin
      - REDIS_URL=redis://:redis123@redis:6379
      - RABBITMQ_URL=amqp://admin:admin123@rabbitmq:5672
      - BACKUP_SERVICE_URL=http://backup-service:3002
      - USER_SERVICE_URL=http://user-service:3001
      - NOTIFICATION_SERVICE_URL=http://notification-service:3003
    depends_on:
      - mongodb
      - redis
      - rabbitmq
    volumes:
      - ./services/report-service:/app
      - /app/node_modules
    networks:
      - backupguard-network

  # Config Service
  config-service:
    build:
      context: ./services/config-service
      dockerfile: Dockerfile.dev
    container_name: backupguard-config-service
    restart: unless-stopped
    ports:
      - "3005:3005"
    environment:
      - NODE_ENV=development
      - PORT=3005
      - MONGODB_URL=mongodb://admin:admin123@mongodb:27017/backupguard?authSource=admin
      - REDIS_URL=redis://:redis123@redis:6379
    depends_on:
      - mongodb
      - redis
    volumes:
      - ./services/config-service:/app
      - /app/node_modules
    networks:
      - backupguard-network

  # Frontend - Admin Dashboard
  admin-dashboard:
    build:
      context: ./frontends/admin-dashboard
      dockerfile: Dockerfile.dev
    container_name: backupguard-admin-dashboard
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:8080/api
      - VITE_WS_URL=ws://localhost:8000
      - VITE_APP_NAME=BackupGuard Pro
      - VITE_APP_VERSION=0.1.0
    depends_on:
      - api-gateway
    volumes:
      - ./frontends/admin-dashboard:/app
      - /app/node_modules
    networks:
      - backupguard-network

  # Frontend - User Portal
  user-portal:
    build:
      context: ./frontends/user-portal
      dockerfile: Dockerfile.dev
    container_name: backupguard-user-portal
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:8080/api
      - VITE_WS_URL=ws://localhost:8000
      - VITE_APP_NAME=BackupGuard
      - VITE_APP_VERSION=0.1.0
    depends_on:
      - api-gateway
    volumes:
      - ./frontends/user-portal:/app
      - /app/node_modules
    networks:
      - backupguard-network

  # Herramientas de Desarrollo y Monitoreo
  
  # MongoDB Express (Administración de BD)
  mongo-express:
    image: mongo-express:1.0.0
    container_name: backupguard-mongo-express
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: admin123
      ME_CONFIG_MONGODB_URL: mongodb://admin:admin123@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin123
    depends_on:
      - mongodb
    networks:
      - backupguard-network

  # Redis Commander (Administración de Redis)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: backupguard-redis-commander
    restart: unless-stopped
    ports:
      - "8082:8081"
    environment:
      REDIS_HOSTS: local:redis:6379:0:redis123
      HTTP_USER: admin
      HTTP_PASSWORD: admin123
    depends_on:
      - redis
    networks:
      - backupguard-network

  # Prometheus (Métricas)
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: backupguard-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - backupguard-network

  # Grafana (Visualización)
  grafana:
    image: grafana/grafana:10.2.0
    container_name: backupguard-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - backupguard-network

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  backupguard-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
